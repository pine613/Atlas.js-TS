/**
 * Atlas.js v0.2.0
 * https://github.com/steelydylan/Atlas.js
 * Copyright steelydylan
 * <http://steelydylan.phpapps.jp/>
 * Released under the MIT license.
 */
(function () { var j = []; var k = 0; var l = 0; var m; var o; var p = []; var q; var r; var s; var u = new Object(); var v = ["‚l‚r ƒSƒVƒbƒN", "‚l‚r –¾’©", "sans-serif", "Meiryo", "fantasy", "Times New Roman", "fantasy"]; var w = "black"; var z = 1; Atlas = function (a) { m = document.getElementById(a); this.fps = 30; this.qualityWidth = 320; this.qualityHeight = 480; m.width = 320; m.height = 480; this.isMobile = false; this.field = m; this.key = u; this.fonts = v; o = m.getContext('2d'); this.ctx = o; if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { m.style.width = window.innerWidth; m.style.height = window.innerHeight; this.width = window.innerWidth; this.height = window.innerHeight; this.isMobile = true } else { m.style.width = 480; m.style.height = 620; this.width = 480; this.height = 620 } document.body.style.margin = "0em"; window.Tile = C; window.Sounds = E; window.Text = D; if (!this.isMobile) { document.onkeydown = function (e) { switch (e.which) { case 39: u.right = true; break; case 37: u.left = true; break; case 38: u.up = true; break; case 40: u.down = true; break } if (e.which == u.buttonA) u.a = true; if (e.which == u.buttonB) u.b = true; return false }; document.onkeyup = function (e) { switch (e.which) { case 39: u.right = false; break; case 37: u.left = false; break; case 38: u.up = false; break; case 40: u.down = false; break } if (e.which == u.buttonA) u.a = false; if (e.which == u.buttonB) u.b = false; return false } } }; var A = function (a) { return String.fromCharCode(a.charCodeAt(a.length - 1) + 1) }; var B = function (a) { var b; var c = "a"; if (a.length > 1) { switch (a) { case "enter": b = 13; break; case "shift": b = 16; break; case "space": b = 32; break } } else { for (var i = 0; i < 24; i++) { if (a == c) { b = 65 + i; break } c = A(c) } } return b }; Atlas.setting = function (a) { if (typeof a == "function") { var b = new Object(); b.method = a; p.push(b) } }; Atlas.prototype = { setBackgroundColor: function (a) { w = a }, setAlpha: function (n) { z = n }, touchStart: function (a) { if (this.isMobile) m.addEventListener("touchstart", a, false); else m.addEventListener("mousedown", a, false) }, touchMove: function (a) { if (this.isMobile) m.addEventListener("touchmove", a, false); else m.addEventListener("mousemove", a, false) }, touchEnd: function (a) { if (this.isMobile) m.addEventListener("touchend", a, false); else m.addEventListener("mouseup", a, false) }, centerize: function () { m.style.marginTop = -this.height / 2; m.style.marginLeft = -this.width / 2; m.style.top = '50%'; m.style.left = '50%'; m.style.position = 'absolute' }, keySet: function (a, b) { u.buttonA = -1; u.buttonB = -1; u.a = false; u.b = false; if (a) u.buttonA = B(a); if (b) u.buttonB = B(b) }, changeQuality: function (a, b) { m.width = a; m.height = b; this.qualityWidth = a; this.qualityHeight = b }, changeSize: function (a, b) { m.style.width = a; m.style.height = b; this.width = a; this.height = b }, getRand: function (a, b) { return ~~(Math.random() * (b - a + 1)) + a }, getPosition: function (e) { e.preventDefault(); var a = this.qualityWidth / this.width; var b = this.qualityHeight / this.height; var c = new Object(); var d = m.getBoundingClientRect(); if (e) { var x = parseInt(d.left); var y = parseInt(d.top); if (isNaN(x)) x = 0; if (isNaN(y)) y = 0; c.x = (this.isMobile ? e.touches[0].pageX : e.pageX) - x; c.y = (this.isMobile ? e.touches[0].pageY : e.pageY) - y } else { c.x = event.x - x; c.y = event.y - y } c.x = parseInt(c.x * a); c.y = parseInt(c.y * b); return c }, mainScene: function (a) { s = a }, loadingScene: function (a) { r = a }, initScene: function (a) { q = a }, start: function () { var a = p.length; for (var i = 0; i < a; i++) { p[i].method() } o.fillStyle = w; o.globalAlpha = 1; o.fillRect(0, 0, m.width, m.height); if (q) q(); setInterval(function () { o.fillStyle = w; o.globalAlpha = z; o.fillRect(0, 0, m.width, m.height); o.globalAlpha = 1; if (l == 0) s(); else if (r) r() }, 1000 / this.fps) }, drawText: function (x, y, a, b, c) { if (c) o.font = c; o.fillStyle = b; o.fillText(a, x, y) }, drawBox: function (x, y, a, b, c, d) { if (d) o.globalAlpha = d; o.beginPath(); o.fillStyle = c; o.fillRect(x, y, a, b); o.globalAlpha = 1 } }; var C = function (a, b, c, d, e) { this.width = b; this.height = c; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.mapping = false; if (arguments.length == 5) this.img = this.LoadDivGraph(a, d, e); else if (arguments.length == 1) { this.width = a.width; this.height = a.height; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.img = a.img } }; C.prototype = { LoadDivGraph: function (a, b, c) { l++; j[k] = new Image(); j[k].src = a; j[k].numX = b; j[k].numY = c; j[k].onload = function () { l--; console.log(this.src + ' isLoaded') }; k++; return k - 1 }, drawScaleGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; o.save(); o.translate(this.x + c / 2, this.y + d / 2); o.rotate(this.rot); o.translate(-c / 2, -d / 2); o.scale(this.sx, this.sy); o.drawImage(b, g, h, c, d, 0, 0, c, d); o.restore() }, drawGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; o.save(); o.translate(this.x + c / 2, this.y + d / 2); o.rotate(this.rot); o.translate(-c / 2, -d / 2); o.drawImage(b, g, h, c, d, 0, 0, c, d); o.restore() }, setMap: function (a) { this.map = a; this.mapping = true }, drawMapGraph: function () { if (this.mapping) { var x = this.map[0].length; var y = this.map.length; var a = this.map; var b = this.width; var c = this.height; var d = this.x; var e = this.y; var i = 0; var t = 0; var f = m.height; var g = m.width; while (i < y) { while (t < x) { this.frame = a[i][t]; if (f > e + c * i && e + c * (i + 1) > 0 && g > d + b * t && d + b * (t + 1) > 0) this.drawGraph(); this.x += b; t++ } this.y += c; i++; this.x = d; t = 0 } this.x = d; this.y = e } }, intersect: function (a, b) { if (a > this.x && a < this.x + this.width && b > this.y && b < this.y + this.height) return true; else return false }, within: function (a, b) { var x = this.x + this.width / 2; var y = this.y + this.height / 2; var c = a.x + a.width / 2; var d = a.y + a.height / 2; var e; if (c < x) { e = c; c = x; x = e } if (c - x > b || d - y > b) return false; x = (c - x) * (c - x); y = (d - y) * (d - y); x = Math.sqrt(x + y); if (x < b) return true; else return false } }; var D = function (a, b, c, d) { if (c) this.font = "'" + c + "'"; else this.font = "'Meiryo'"; if (b) this.size = b + "pt"; else this.size = "10pt"; if (a) this.string = a; else this.string = ""; if (d) this.color = d; else this.col = "white"; this.x = 0; this.y = 0 }; D.prototype = { setSize: function (a) { this.size = a + "pt" }, setFont: function (a) { this.font = "'" + a + "'" }, drawText: function () { o.font = this.size + " " + this.font; o.fillStyle = this.color; o.fillText(this.string, this.x, this.y) } }; var E = function () { var a = arguments.length; this.data = []; for (var i = 0; i < a; i++) { this.data.push(new Audio(arguments[i])); this.data[i].playing = false } }; E.prototype = { play: function (a) { if (this.data[a].paused) this.data[a].play(); else if (!this.data[a].loop) (new Audio(this.data[a].src)).play(); this.data[a].playing = true }, loop: function (a) { var b = this.data[a]; if (!b.loop) { b.addEventListener('ended', function () { b.currentTime = 0; b.play() }, false) } b.loop = true; b.playing = true; b.play() }, restart: function (a) { this.data[a].load(); this.data[a].play(); this.data[a].playing = true }, pause: function (a) { if (this.data[a].playing == true) { this.data[a].pause(); this.data[a].playing = false } }, stop: function (a) { if (this.data[a].playing == true) { this.data[a].pause(); this.data[a].currentTime = 0; this.data[a].playing = false } else { this.data[a].load() } }, getCount: function (a) { return this.data[a].currentTime }, setCount: function (a, b) { if (this.data[a].playing == true) this.data[a].currentTime = b }, getVolume: function (a) { return this.data[a].volume }, setVolume: function (a, b) { this.data[a].volume = b }, getAlltime: function (a) { return this.data[a].duration }, isPlaying: function (a) { return this.data[a].playing } } })();
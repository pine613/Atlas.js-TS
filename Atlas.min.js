/**
 * Atlas.js v0.1.0
 * https://github.com/steelydylan/Atlas.js
 * Copyright steelydylan
 * <http://steelydylan.phpapps.jp/>
 * Released under the MIT license.
 */
(function () { var j = []; var k = []; var l = 0; var m = 0; var n = 0; var o; var p; var q = []; var r; var s; var u; var v = new Object(); Atlas = function (a) { o = document.getElementById(a); this.fps = 30; this.width = 320; this.height = 480; this.isMobile = false; this.center = false; this.field = o; this.key = v; p = o.getContext('2d'); this.ctx = p; if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { o.style.width = window.innerWidth; o.style.height = window.innerHeight; this.isMobile = true } else { o.style.width = 480; o.style.height = 620 } document.body.style.margin = "0em"; window.Tile = A; window.Sound = B; if (!this.isMobile) { document.onkeydown = function (e) { switch (e.which) { case 39: v.right = true; break; case 37: v.left = true; break; case 38: v.up = true; break; case 40: v.down = true; break } if (e.which == v.buttonA) v.a = true; if (e.which == v.buttonB) v.b = true; return false }; document.onkeyup = function (e) { switch (e.which) { case 39: v.right = false; break; case 37: v.left = false; break; case 38: v.up = false; break; case 40: v.down = false; break } if (e.which == v.buttonA) v.a = false; if (e.which == v.buttonB) v.b = false; return false } } }; var w = function (a) { return String.fromCharCode(a.charCodeAt(a.length - 1) + 1) }; var z = function (a) { var b; var c = "a"; if (a.length > 1) { switch (a) { case "enter": b = 13; break; case "shift": b = 16; break; case "space": b = 32; break } } else { for (var i = 0; i < 24; i++) { if (a == c) { b = 65 + i; break } c = w(c) } } return b }; Atlas.setting = function (a) { if (typeof a == "function") { var b = new Object(); b.method = a; q.push(b) } }; Atlas.prototype = { touchStart: function (a) { if (this.isMobile) o.addEventListener("touchstart", a, false); else o.addEventListener("mousedown", a, false) }, touchMove: function (a) { if (this.isMobile) o.addEventListener("touchmove", a, false); else o.addEventListener("mousemove", a, false) }, touchEnd: function (a) { if (this.isMobile) o.addEventListener("touchend", a, false); else o.addEventListener("mouseup", a, false) }, centerize: function () { o.style.marginLeft = window.innerWidth / 2 - parseInt(o.style.width) / 2; o.style.marginTop = window.innerHeight / 2 - parseInt(o.style.height) / 2; this.center = true }, keySet: function (a, b) { v.buttonA = -1; v.buttonB = -1; v.a = false; v.b = false; if (a) v.buttonA = z(a); if (b) v.buttonB = z(b) }, changeQuality: function (a, b) { o.width = a; o.height = b }, changeSize: function (a, b) { o.style.width = a; o.style.height = b; if (this.center) { o.style.marginLeft = window.innerWidth / 2 - a / 2; o.style.marginTop = window.innerHeight / 2 - b / 2 } }, getRand: function (a, b) { return ~~(Math.random() * (b - a + 1)) + a }, getPosition: function (e) { e.preventDefault(); var a = new Object(); if (e) { var x = parseInt(o.style.marginLeft); var y = parseInt(o.style.marginTop); if (isNaN(x)) x = 0; if (isNaN(y)) y = 0; a.x = (this.isMobile ? e.touches[0].pageX : e.pageX) - x; a.y = (this.isMobile ? e.touches[0].pageY : e.pageY) - y } else { a.x = event.x + document.body.scrollLeft; a.y = event.y + document.body.scrollTop } return a }, mainScene: function (a) { u = a }, loadingScene: function (a) { s = a }, initScene: function (a) { r = a }, start: function () { var a = q.length; for (var i = 0; i < a; i++) { q[i].method() } if (r) r(); setInterval(function () { p.fillStyle = 'black'; p.fillRect(0, 0, o.width, o.height); if (n == 0) u(); else if (s) s() }, 1000 / this.fps) }, drawText: function (x, y, a, b, c) { if (c) p.font = c; p.fillStyle = b; p.fillText(a, x, y) }, drawBox: function (x, y, a, b, c, d) { if (d) p.globalAlpha = d; p.beginPath(); p.fillStyle = c; p.fillRect(x, y, a, b); p.globalAlpha = 1 } }; var A = function (a, b, c, d, e) { this.width = b; this.height = c; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.mapping = false; if (arguments.length == 5) this.img = this.LoadDivGraph(a, d, e); else if (arguments.length == 1) { this.width = a.width; this.height = a.height; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.img = a.img } }; A.prototype = { LoadDivGraph: function (a, b, c) { n++; j[m] = new Image(); j[m].src = a; j[m].numX = b; j[m].numY = c; j[m].onload = function () { n--; console.log(this.src + ' isLoaded') }; m++; return m - 1 }, drawScaleGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; p.save(); p.translate(this.x + c / 2, this.y + d / 2); p.rotate(this.rot); p.translate(-c / 2, -d / 2); p.scale(this.sx, this.sy); p.drawImage(b, g, h, c, d, 0, 0, c, d); p.restore() }, drawGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; p.save(); p.translate(this.x + c / 2, this.y + d / 2); p.rotate(this.rot); p.translate(-c / 2, -d / 2); p.drawImage(b, g, h, c, d, 0, 0, c, d); p.restore() }, setMap: function (a) { this.map = a; this.mapping = true }, drawMapGraph: function () { if (this.mapping) { var x = this.map[0].length; var y = this.map.length; var a = this.map; var b = this.width; var c = this.height; var d = this.x; var e = this.y; var i = 0; var t = 0; var f = o.height; var g = o.width; while (i < y) { while (t < x) { this.frame = a[i][t]; if (f > e + c * i && e + c * (i + 1) > 0 && g > d + b * t && d + b * (t + 1) > 0) this.drawGraph(); this.x += b; t++ } this.y += c; i++; this.x = d; t = 0 } this.x = d; this.y = e } }, intersect: function (a, b) { if (a > this.x && a < this.x + this.width && b > this.y && b < this.y + this.height) return true; else return false }, within: function (a, b) { var x = this.x + this.width / 2; var y = this.y + this.height / 2; var c = a.x + a.width / 2; var d = a.y + a.height / 2; var e; if (c < x) { e = c; c = x; x = e } if (c - x > b || d - y > b) return false; x = (c - x) * (c - x); y = (d - y) * (d - y); x = Math.sqrt(x + y); if (x < b) return true; else return false } }; var B = function (a) { this.id = this.loadSound(a); this.loop = 0 }; B.prototype = { loadSound: function (a) { if (Audio) { k[l] = new Audio(a); l++; return l - 1 } else return 0 }, playSound: function () { if (Audio) { if (this.loop == 1) k[id].loop = true; k[id].play() } } } })();
/**
 * Atlas.js v0.0.3
 * https://github.com/steelydylan/Atlas.js
 * Copyright steelydylan
 * <ess_president@me.com>.
 * Released under the MIT license.
 */
(function () { var g = []; var h = []; var j = 0; var k = 0; var l = 0; var m; var n; var o; var p; var q; var r = new Object(); Atlas = function (a) { m = document.getElementById(a); this.fps = 30; this.width = 320; this.height = 480; this.isMobile = false; this.center = false; this.field = m; this.key = r; n = m.getContext('2d'); this.ctx = n; if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { m.style.width = window.innerWidth; m.style.height = window.innerHeight; this.isMobile = true } else { m.style.width = 480; m.style.height = 620 } document.body.style.margin = "0em"; window.Tile = u; window.Sound = v; if (!this.isMobile) { document.onkeydown = function (e) { switch (e.which) { case 39: r.right = 1; break; case 37: r.left = 1; break; case 38: r.up = 1; break; case 40: r.down = 1; break } if (e.which == r.buttonA) r.a = true; if (e.which == r.buttonB) r.b = true; return false }; document.onkeyup = function (e) { switch (e.which) { case 39: r.right = 0; break; case 37: r.left = 0; break; case 38: r.up = 0; break; case 40: r.down = 0; break } if (e.which == r.buttonA) r.a = false; if (e.which == r.buttonB) r.b = false; return false } } }; String.prototype.succ = function () { return String.fromCharCode(this.charCodeAt(this.length - 1) + 1) }; var s = function (a) { var b; var c = "a"; if (a.length > 1) { switch (a) { case "enter": b = 13; break; case "shift": b = 16; break; case "space": b = 32; break } } else { for (var i = 0; i < 24; i++) { if (a == c) { b = 65 + i; break } c = c.succ() } } return b }; Atlas.prototype = { touchstart: function (a) { if (this.isMobile) m.addEventListener("touchstart", a, false); else m.addEventListener("mousedown", a, false) }, touchmove: function (a) { if (this.isMobile) m.addEventListener("touchmove", a, false); else m.addEventListener("mousemove", a, false) }, touchend: function (a) { if (this.isMobile) m.addEventListener("touchend", a, false); else m.addEventListener("mouseup", a, false) }, centerize: function () { m.style.marginLeft = window.innerWidth / 2 - parseInt(m.style.width) / 2; m.style.marginTop = window.innerHeight / 2 - parseInt(m.style.height) / 2; this.center = true }, keySet: function (a, b) { r.buttonA = -1; r.buttonB = -1; r.a = false; r.b = false; if (a) r.buttonA = s(a); if (b) r.buttonB = s(b) }, changeQuality: function (a, b) { m.width = a; m.height = b }, changeSize: function (a, b) { m.style.width = a; m.style.height = b; if (this.center) { m.style.marginLeft = window.innerWidth / 2 - a / 2; m.style.marginTop = window.innerHeight / 2 - b / 2 } }, getRand: function (a, b) { return ~~(Math.random() * (b - a + 1)) + a }, getPosition: function (e) { e.preventDefault(); var a = new Object(); if (e) { var x = parseInt(m.style.marginLeft); var y = parseInt(m.style.marginTop); if (isNaN(x)) x = 0; if (isNaN(y)) y = 0; a.x = (this.isMobile ? e.touches[0].pageX : e.pageX) - x; a.y = (this.isMobile ? e.touches[0].pageY : e.pageY) - y } else { a.x = event.x + document.body.scrollLeft; a.y = event.y + document.body.scrollTop } return a }, MainScene: function (a) { q = a }, LoadingScene: function (a) { p = a }, InitScene: function (a) { o = a }, start: function () { if (o) o(); setInterval(function () { n.fillStyle = 'black'; n.fillRect(0, 0, m.width, m.height); if (l == 0) q(); else if (p) p() }, 1000 / this.fps) }, drawText: function (x, y, a, b, c) { if (c) n.font = c; n.fillStyle = b; n.fillText(a, x, y) }, drawBox: function (x, y, a, b, c, d) { if (d) n.globalAlpha = d; n.beginPath(); n.fillStyle = c; n.fillRect(x, y, a, b); n.globalAlpha = 1 } }; var u = function (a, b, c, d, e) { this.width = b; this.height = c; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.mapping = false; if (arguments.length == 5) this.img = this.LoadDivGraph(a, b, c, d, e); else if (arguments.length == 1) { this.width = a.width; this.height = a.height; this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.img = a.img } }; u.prototype = { LoadDivGraph: function (a, b, c, d, e) { l++; g[k] = new Image(); g[k].src = a; g[k].SizeX = b; g[k].SizeY = c; g[k].numX = d; g[k].numY = e; g[k].onload = function () { l--; console.log(this.src + ' isLoaded') }; k++; return k - 1 }, drawScaleGraph: function () { var a = g[this.img].SizeX; var b = g[this.img].SizeY; var c = g[this.img].numX; var d = g[this.img].numY; var e = (this.frame % c) * a; var f = (~~(this.frame / c) % d) * b; n.save(); n.translate(this.x + a / 2, this.y + b / 2); n.rotate(this.rot); n.translate(-a / 2, -b / 2); n.scale(this.sx, this.sy); n.drawImage(g[this.img], e, f, a, b, 0, 0, a, b); n.restore() }, drawGraph: function () { var a = g[this.img].SizeX; var b = g[this.img].SizeY; var c = g[this.img].numX; var d = g[this.img].numY; var e = (this.frame % c) * a; var f = (~~(this.frame / c) % d) * b; n.save(); n.translate(this.x + a / 2, this.y + b / 2); n.rotate(this.rot); n.translate(-a / 2, -b / 2); n.drawImage(g[this.img], e, f, a, b, 0, 0, a, b); n.restore() }, setMap: function (a) { this.map = a; this.mapping = true }, drawMapGraph: function () { if (this.mapping) { var x = this.map[0].length; var y = this.map.length; var a = this.map; var b = this.width; var c = this.height; var d = this.x; var e = this.y; var i = 0; var t = 0; while (i < y) { while (t < x) { this.frame = a[i][t]; this.drawGraph(); this.x += b; t++ } this.y += c; i++; this.x = d; t = 0 } this.x = d; this.y = e } }, Intersect: function (a, b) { if (a > this.x && a < this.x + g[this.img].SizeX && b > this.y && b < this.y + g[this.img].SizeY) return true; else return false }, WithIn: function (a, b) { var x = this.x + g[this.img].SizeX / 2; var y = this.y + g[this.img].SizeY / 2; var c = a.x + g[a.img].SizeX / 2; var d = a.y + g[a.img].SizeY / 2; var e; if (c < x) { e = c; c = x; x = e } if (c - x > b || d - y > b) return false; x = (c - x) * (c - x); y = (d - y) * (d - y); x = Math.sqrt(x + y); if (x < b) return true; else return false } }; var v = function (a) { this.id = this.LoadSound(a); this.loop = 0 }; v.prototype = { LoadSound: function (a) { if (Audio) { h[j] = new Audio(a); j++; return j - 1 } else return 0 }, PlaySound: function () { if (Audio) { if (this.loop == 1) h[id].loop = true; h[id].play() } } } })();
/**
 * Atlas.js v0.3.0
 * https://github.com/steelydylan/Atlas.js
 * Copyright steelydylan
 * <http://steelydylan.phpapps.jp/>
 * Released under the MIT license.
 */
(function () { var j = []; var k = 0; var l = 0; var m; var o; var p; var q; var r = new Object(); var s = "black"; var u = 1; var v = false; Atlas = function (a) { m = document.getElementById(a); m.width = 320; m.height = 480; document.body.style.margin = "0em"; o = m.getContext('2d'); if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { m.style.width = window.innerWidth; m.style.height = window.innerHeight; v = true } else { this.width = 480; this.height = 620 } window.Screen = C; window.Tile = D; window.Sounds = G; window.Text = F; window.Shape = E; window.Group = H; window.Util = B }; var w = function (a, b) { return ~~(Math.random() * (b - a + 1)) + a }; var z = function (a) { return String.fromCharCode(a.charCodeAt(a.length - 1) + 1) }; var A = function (a) { var b; var c = "a"; if (a.length > 1) { switch (a) { case "enter": b = 13; break; case "shift": b = 16; break; case "space": b = 32; break } } else { for (var i = 0; i < 24; i++) { if (a == c) { b = 65 + i; break } c = z(c) } } return b }; Atlas.createClass = function (a, b) { var c = function () { this.initialize.apply(this, arguments) }; if (typeof a == "function" && typeof b == "object") { c.prototype = a.prototype; c.prototype.inherent = function () { a.apply(this, arguments) } } else if (typeof a == "object" && b == null) { b = a } for (var d in b) { c.prototype[d] = b[d] } c.prototype.constructor = c; return c }; var B = function () { this.isMobile = v; this.key = r }; B.prototype = { getRand: w, keyEnable: function () { if (!this.isMobile) { document.onkeydown = function (e) { switch (e.which) { case 39: r.right = true; break; case 37: r.left = true; break; case 38: r.up = true; break; case 40: r.down = true; break } if (e.which == r.buttonA) r.a = true; if (e.which == r.buttonB) r.b = true; return false }; document.onkeyup = function (e) { switch (e.which) { case 39: r.right = false; break; case 37: r.left = false; break; case 38: r.up = false; break; case 40: r.down = false; break } if (e.which == r.buttonA) r.a = false; if (e.which == r.buttonB) r.b = false; return false } } }, keySet: function (a, b) { r.buttonA = -1; r.buttonB = -1; r.a = false; r.b = false; if (a) r.buttonA = A(a); if (b) r.buttonB = A(b) } }; var C = function () { this.fps = 30; this.qualityWidth = 320; this.qualityHeight = 480; this.field = m; this.key = r; this.ctx = o; this.width = m.style.width; this.height = m.style.height }; C.prototype = { getRand: w, setBackgroundColor: function (a) { s = a }, setAlpha: function (n) { u = n }, touchStart: function (a) { if (v) m.addEventListener("touchstart", a, false); else m.addEventListener("mousedown", a, false) }, touchMove: function (a) { if (v) m.addEventListener("touchmove", a, false); else m.addEventListener("mousemove", a, false) }, touchEnd: function (a) { if (v) m.addEventListener("touchend", a, false); else m.addEventListener("mouseup", a, false) }, centerize: function () { m.style.marginTop = -this.height / 2; m.style.marginLeft = -this.width / 2; m.style.top = '50%'; m.style.left = '50%'; m.style.position = 'absolute' }, fitWindow: function () { this.changeSize(window.innerWidth, window.innerHeight); var a = this; window.onresize = function () { a.changeSize(window.innerWidth, window.innerHeight) } }, changeQuality: function (a, b) { m.width = a; m.height = b; this.qualityWidth = a; this.qualityHeight = b }, changeSize: function (a, b) { m.style.width = a; m.style.height = b; this.width = a; this.height = b }, getPosition: function (e) { e.preventDefault(); var a = this.qualityWidth / this.width; var b = this.qualityHeight / this.height; var c = new Object(); var d = m.getBoundingClientRect(); if (e) { var x = parseInt(d.left); var y = parseInt(d.top); if (isNaN(x)) x = 0; if (isNaN(y)) y = 0; if (!this.isMobile || (this.isMobile && e.touches[0])) { c.x = (this.isMobile ? e.touches[0].pageX : e.pageX) - x; c.y = (this.isMobile ? e.touches[0].pageY : e.pageY) - y } else { c.x = -1; c.y = -1 } } else { c.x = event.x - x; c.y = event.y - y } c.x = parseInt(c.x * a); c.y = parseInt(c.y * b); return c }, mainScene: function (a) { q = a }, loadingScene: function (a) { p = a }, start: function () { o.fillStyle = s; o.globalAlpha = 1; o.fillRect(0, 0, m.width, m.height); setInterval(function () { o.fillStyle = s; o.globalAlpha = u; o.fillRect(0, 0, m.width, m.height); o.globalAlpha = 1; if (l == 0) q(); else if (p) p() }, 1000 / this.fps) }, drawText: function (x, y, a, b, c) { if (c) o.font = c; o.fillStyle = b; o.fillText(a, x, y) }, drawBox: function (x, y, a, b, c, d) { if (d) o.globalAlpha = d; o.beginPath(); o.fillStyle = c; o.fillRect(x, y, a, b); o.globalAlpha = 1 } }; var D = function (a, b, c) { this.x = 0; this.y = 0; this.sx = 1; this.sy = 1; this.rot = 0; this.frame = 0; this.mapping = false; this.width = b; this.height = c; if (typeof a == "string") this.img = this.LoadDivGraph(a); else { this.img = a.img } }; D.prototype = { getRand: w, LoadDivGraph: function (a) { l++; j[k] = new Image(); j[k].src = a; var b = this; j[k].onload = function () { this.numX = this.width / b.width; this.numY = this.height / b.height; l--; console.log(this.src + ' isLoaded') }; k++; return k - 1 }, drawScaleGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; o.save(); o.translate(this.x + c / 2, this.y + d / 2); o.rotate(this.rot); o.translate(-c / 2, -d / 2); o.scale(this.sx, this.sy); o.drawImage(b, g, h, c, d, 0, 0, c, d); o.restore() }, drawGraph: function () { var a = this.frame; var b = j[this.img]; var c = this.width; var d = this.height; var e = b.numX; var f = b.numY; var g = (a % e) * c; var h = (~~(a / e) % f) * d; o.save(); o.translate(this.x + c / 2, this.y + d / 2); o.rotate(this.rot); o.translate(-c / 2, -d / 2); o.drawImage(b, g, h, c, d, 0, 0, c, d); o.restore() }, setMap: function (a) { this.map = a; this.mapping = true }, drawMapGraph: function () { if (this.mapping) { var x = this.map[0].length; var y = this.map.length; var a = this.map; var b = this.width; var c = this.height; var d = this.x; var e = this.y; var i = 0; var t = 0; var f = m.height; var g = m.width; while (i < y) { while (t < x) { this.frame = a[i][t]; if (this.frame >= 0 && f > e + c * i && e + c * (i + 1) > 0 && g > d + b * t && d + b * (t + 1) > 0) this.drawGraph(); this.x += b; t++ } this.y += c; i++; this.x = d; t = 0 } this.x = d; this.y = e } }, setPosition: function (x, y) { this.x = x; this.y = y }, intersect: function (a, b) { if (a > this.x && a < this.x + this.width && b > this.y && b < this.y + this.height) return true; else return false }, within: function (a, b) { var x = this.x + this.width / 2; var y = this.y + this.height / 2; var c, dy; if (a.width) { c = a.x + a.width / 2; dy = a.y + a.height / 2 } else { c = a.x; dy = a.y } if (!b) b = this.width / 2; var d; if (c < x) { d = c; c = x; x = d } if (c - x > b || dy - y > b) return false; x = (c - x) * (c - x); y = (dy - y) * (dy - y); x = Math.sqrt(x + y); if (x < b) return true; else return false } }; var E = function (a, b, c, d) { this.x = 0; this.y = 0; this.col = b; this.alpha = 1; if (a == "box") { this.width = c; this.height = d; this.shape = 0 } else if (a == "circle") { this.radius = c; this.shape = 1 } }; E.prototype = { getRand: w, setPosition: function (x, y) { this.x = x; this.y = y }, intersect: function (a, b) { if (this.shape == 0) { if (a > this.x && a < this.x + this.width && b > this.y && b < this.y + this.height) return true; else return false } else if (this.shape == 1) { if (Math.squrt(Math.pow(a - this.x, 2) + Math.pow(b - this.y, 2)) < this.radius) return true; else return false } }, drawShape: function () { o.globalAlpha = this.alpha; o.beginPath(); o.fillStyle = this.col; if (this.shape == 0) o.fillRect(this.x, this.y, this.width, this.height); else if (this.shape == 1) { o.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false); o.fill() } o.globalAlpha = 1 } }; var F = function (a, b, c, d) { if (c) this.font = "'" + c + "'"; else this.font = "'Meiryo'"; if (b) this.size = b + "pt"; else this.size = "10pt"; if (a) this.string = a; else this.string = ""; if (d) this.color = d; else this.col = "white"; this.x = 0; this.y = 0 }; F.prototype = { getRand: w, setSize: function (a) { this.size = a + "pt" }, setFont: function (a) { this.font = "'" + a + "'" }, drawText: function () { o.font = this.size + " " + this.font; o.fillStyle = this.color; o.fillText(this.string, this.x, this.y) } }; var G = Atlas.createClass(Array, { getRand: w, initialize: function () { this.inherent(); for (var i = 0, n = arguments.length; i < n; i++) { this.push(new Audio(arguments[i])); this[i].playing = false } }, play: function (a) { if (this[a].paused) this[a].play(); else if (!this[a].loop) (new Audio(this[a].src)).play(); this[a].playing = true }, loop: function (a) { var b = this[a]; if (!b.loop) { b.addEventListener('ended', function () { b.currentTime = 0; b.play() }, false) } b.loop = true; b.playing = true; b.play() }, restart: function (a) { this[a].load(); this[a].play(); this[a].playing = true }, pause: function (a) { if (this[a].playing == true) { this[a].pause(); this[a].playing = false } }, stop: function (a) { if (this[a].playing == true) { this[a].pause(); this[a].currentTime = 0; this[a].playing = false } else { this[a].load() } }, getCount: function (a) { return this[a].currentTime }, setCount: function (a, b) { if (this[a].playing == true) this[a].currentTime = b }, getVolume: function (a) { return this[a].volume }, setVolume: function (a, b) { this[a].volume = b }, getAlltime: function (a) { return this[a].duration }, isPlaying: function (a) { return this[a].playing } }); var H = Atlas.createClass(Array, { getRand: w, initialize: function () { this.inherent() }, add: function (a) { if (typeof a == 'object' && typeof a.move == 'function') { a.remove = false; this.push(a) } }, move: function () { var a = arguments.length; for (var i = 0, n = this.length; i < n; i++) { if (a > 0) this[i].move.apply(this[i], arguments); else this[i].move(); if (this[i].remove) { this.splice(i, 1); i--; n-- } } } }); Atlas.Screen = C; Atlas.Tile = D; Atlas.Sounds = G; Atlas.Text = F; Atlas.Shape = E; Atlas.Group = H; Atlas.Util = B })();
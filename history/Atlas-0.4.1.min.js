/**
 * Atlas.js v0.4.1
 * https://github.com/steelydylan/Atlas.js
 * Copyright steelydylan
 * <http://steelydylan.phpapps.jp/>
 * Released under the MIT license.
 */
(function () { var v = []; var w = []; var z = 0; var A; var B; var C; var D; var E = new Object(); var F = "black"; var G = 1; var H = false; Atlas = function (a) { A = document.getElementById(a); A.width = 320; A.height = 480; document.body.style.margin = "0em"; B = A.getContext('2d'); if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { A.style.width = window.innerWidth; A.style.height = window.innerHeight; H = true } else { this.width = 480; this.height = 620 } window.App = I; window.Sprite = L; window.Text = N; window.Shape = M; window.Group = O; window.Map = K }; Atlas.createClass = function (a, b) { var c = function () { this.initialize.apply(this, arguments) }; if (typeof a == "function" && typeof b == "object") { c.prototype = Object.create(a.prototype); c.prototype.inherent = function () { this.initialize = a.prototype.initialize; a.apply(this, arguments) } } else if (typeof a == "object" && b == null) { b = a } for (var d in b) { c.prototype[d] = b[d] } c.prototype.constructor = c; return c }; var I = function () { this.fps = 30; this.qualityWidth = 320; this.qualityHeight = 480; this.field = A; this.key = E; this.isMobile = H; this.ctx = B; this.width = A.style.width; this.height = A.style.height; if (H) { var a = window.matchMedia("(orientation: portrait)"); if (a.matches) { this.orientation = "portrait" } else { this.orientation = "landscape" } } }; I.prototype = { setBackgroundColor: function (a) { F = a }, setAlpha: function (n) { G = n }, keyEnable: function () { if (!this.isMobile) { document.onkeydown = function (e) { switch (e.which) { case 39: E.right = true; break; case 37: E.left = true; break; case 38: E.up = true; break; case 40: E.down = true; break } if (e.which == E.buttonA) E.a = true; if (e.which == E.buttonB) E.b = true; return false }; document.onkeyup = function (e) { switch (e.which) { case 39: E.right = false; break; case 37: E.left = false; break; case 38: E.up = false; break; case 40: E.down = false; break } if (e.which == E.buttonA) E.a = false; if (e.which == E.buttonB) E.b = false; return false } } }, keySet: function (d, e) { var f = function (a) { return String.fromCharCode(a.charCodeAt(a.length - 1) + 1) }; var g = function (a) { var b; var c = "a"; if (a.length > 1) { switch (a) { case "enter": b = 13; break; case "shift": b = 16; break; case "space": b = 32; break } } else { for (var i = 0; i < 24; i++) { if (a == c) { b = 65 + i; break } c = f(c) } } return b }; E.buttonA = -1; E.buttonB = -1; E.a = false; E.b = false; if (d) E.buttonA = g(d); if (e) E.buttonB = g(e) }, touchStart: function (a) { if (H) A.addEventListener("touchstart", a, false); else A.addEventListener("mousedown", a, false) }, touchMove: function (a) { if (H) A.addEventListener("touchmove", a, false); else A.addEventListener("mousemove", a, false) }, touchEnd: function (a) { if (H) A.addEventListener("touchend", a, false); else A.addEventListener("mouseup", a, false) }, centerize: function () { A.style.marginTop = -this.height / 2; A.style.marginLeft = -this.width / 2; A.style.top = '50%'; A.style.left = '50%'; A.style.position = 'absolute' }, fitWindow: function () { this.changeSize(window.innerWidth, window.innerHeight); var a = this; window.onresize = function () { a.changeSize(window.innerWidth, window.innerHeight) } }, detectOrientation: function (b, c) { if (this.isMobile) { var d = this; window.addEventListener("orientationchange", function () { var a = window.matchMedia("(orientation: portrait)"); if (a.matches) { d.orientation = "portrait" } else { d.orientation = "landscape" } }, false) } }, changeQuality: function (a, b) { A.width = a; A.height = b; this.qualityWidth = a; this.qualityHeight = b }, changeSize: function (a, b) { A.style.width = a; A.style.height = b; this.width = a; this.height = b }, getPosition: function (e) { e.preventDefault(); var a = this.qualityWidth / this.width; var b = this.qualityHeight / this.height; var c = new Object(); var d = A.getBoundingClientRect(); if (e) { var x = parseInt(d.left); var y = parseInt(d.top); if (isNaN(x)) x = 0; if (isNaN(y)) y = 0; if (!this.isMobile || (this.isMobile && e.touches[0])) { c.x = (this.isMobile ? e.touches[0].pageX : e.pageX) - x; c.y = (this.isMobile ? e.touches[0].pageY : e.pageY) - y } else { c.x = -1; c.y = -1 } } else { c.x = event.x - x; c.y = event.y - y } c.x = parseInt(c.x * a); c.y = parseInt(c.y * b); return c }, mainScene: function (a) { D = a }, loadingScene: function (a) { C = a }, start: function () { B.fillStyle = F; B.globalAlpha = 1; B.fillRect(0, 0, A.width, A.height); setInterval(function () { B.fillStyle = F; B.globalAlpha = G; B.fillRect(0, 0, A.width, A.height); B.globalAlpha = 1; if (z <= 0) D(); else if (C) C() }, 1000 / this.fps) }, load: function () { function getExtention(a) { var b; if (!a) { return b } var c = a.split("."); var d = c.length; if (d === 0) { return b } b = c[d - 1]; return b } for (var i = 0, n = arguments.length; i < n; i++) { var e = arguments[i]; var f = getExtention(e); if (f == 'wav' || f == 'mp3' || f == 'ogg') { var g = new Audio(e); g.name = e; z++; g.addEventListener("canplaythrough", function () { z--; console.log(this.src + " is loaded") }); w.push(g) } else { var g = new Image(); g.src = e; g.name = e; g.onload = function () { z--; console.log(this.src + ' is loaded') }; v.push(g) } } }, naming: function () { for (var t = 0, l = arguments.length; t < l; t++) { for (var i = 0, n = w.length; i < n; i++) { if (w[i].name == arguments[t][0]) { w[i].name = arguments[t][1] } } for (var i = 0, n = v.length; i < n; i++) { if (v[i].name == arguments[t][0]) { v[i].name = arguments[t][1] } } } } }; var J = function () { }; J.prototype = { ctx: B, getRand: function (a, b) { return ~~(Math.random() * (b - a + 1)) + a }, intersect: function (a, b) { if (this.collisionShape == "box") { var x = a - (this.x + this.width / 2); var y = b - (this.y + this.height / 2); var r = this.rot; var s = Math.sin(-r); var c = Math.cos(-r); var d = Math.abs(x * c - y * s); var e = Math.abs(x * s + y * c); if (d < this.width / 2.0 && e < this.height / 2.0) return true; return false } else if (this.collisionShape == "circle") { var f = this.width / 2; var x = a - (this.x + f); var y = b - (this.y + f); if (Math.sqrt(x * x + y * y) < f) return true; return false } else { return false } }, within: function (c, d) { if (this.collisionShape == "box") { var e = this.x + this.width / 2; var f = this.y + this.height / 2 } else if (this.collisionShape == "circle") { var g = this.width / 2; var e = this.x + g; var f = this.y + g } else { return false } if (c.collisionShape == "box") { var h = c.x + c.width / 2; var i = c.y + c.height / 2; var j = -c.rot; var k = Math.cos(j) * (e - h) - Math.sin(j) * (f - i) + h; var l = Math.sin(j) * (e - h) + Math.cos(j) * (f - i) + i; var x, y; if (k < c.x) x = c.x; else if (k > c.x + c.width) x = c.x + c.width; else x = k; if (l < c.y) y = c.y; else if (l > c.y + c.height) y = c.y + c.height; else y = l; var a = Math.abs(k - x); var b = Math.abs(l - y) } else if (c.collisionShape == "circle") { var m = c.width / 2; var x = c.x + m; var y = c.y + m; var a = Math.abs(e - x); var b = Math.abs(f - y); d += m } else { return false } if (Math.sqrt((a * a) + (b * b)) < d) return true; return false }, scale: function (a, b) { this.width *= a; this.height *= b }, setPosition: function (x, y) { this.x = x; this.y = y }, getImage: function (a) { var b = -1; var c = v.length; for (var i = 0; i < c; i++) if (v[i].name == a) this.img = i }, getSound: function (a) { for (var i = 0, n = w.length; i < n; i++) { if (a == w[i].name) this.sound = new Audio(w[i].src) } }, soundClonePlay: function () { var a = this.sound; if (a) { (new Audio(a.src)).play() } }, soundLoopPlay: function () { var a = this.sound; if (a) { if (!a.loop) { a.addEventListener('ended', function () { this.currentTime = 0; this.play() }, false) } a.loop = true; a.play() } }, soundReplay: function () { var a = this.sound; if (a) { a.load(); a.play() } }, soundStop: function () { var a = this.sound; if (!a.paused) { a.pause(); a.currentTime = 0 } else { a.load() } }, soundPlay: function () { var a = this.sound; if (a) a.play() }, soundPause: function () { var a = this.sound; if (a) a.pause() }, soundGetCount: function () { var a = this.sound; if (a) return a.currentTime }, soundSetCount: function (a) { var b = this.sound; if (b) b.currentTime = a }, soundGetVolume: function () { var a = this.sound; if (a) return a.volume }, soundSetVolume: function (a) { var b = this.sound; if (b) b.volume = a }, soundGetAlltime: function () { var a = this.sound; if (a) return a.duration }, soundIsPlaying: function () { var a = this.sound; if (a) return !a.paused } }; var K = Atlas.createClass(J, { initialize: function (a, b, c) { this.x = 0; this.y = 0; this.width = b; this.height = c; this.spriteWidth = b; this.spriteHeight = c; this.drawData; this.hitData; this.getImage(a) }, intersect: function (a, b) { var c = this.hitData; var x = c[0].length; var y = c.length; var d = this.width; var e = this.height; var f = this.x; var g = this.y; for (var i = 0; i < y; i++) { for (var t = 0; t < x; t++) { if (c[i][t] == 1 && f + t * d < a && a < f + (t + 1) * d && g + i * e < b && b < g + (i + 1) * e) return true } } return false }, draw: function () { var a = this.drawData; var x = a[0].length; var y = a.length; var b = this.width; var c = this.height; var d = this.x; var e = this.y; var i = 0; var t = 0; var f = A.height; var g = A.width; var h; var j = v[this.img]; var k = this.spriteWidth; var l = this.spriteHeight; var m = this.width / 2; var n = this.height / 2; var o = j.width / k; var p = j.height / l; var q = this.width / k; var r = this.height / l; var s = (h % o) * k; var u = (~~(h / o) % p) * l; while (i < y) { while (t < x) { h = a[i][t]; if (h >= 0 && f > e + c * i && e + c * (i + 1) > 0 && g > d + b * t && d + b * (t + 1) > 0) { var s = (h % o) * k; var u = (~~(h / o) % p) * l; B.save(); B.translate(this.x, this.y); B.scale(q, r); B.drawImage(j, s, u, k, l, 0, 0, k, l); B.restore() } this.x += b; t++ } this.y += c; i++; this.x = d; t = 0 } this.x = d; this.y = e } }); var L = Atlas.createClass(J, { initialize: function (a, b, c) { this.x = 0; this.y = 0; this.rot = 0; this.frame = 0; this.alpha = 1; this.mapping = false; this.width = b; this.height = c; this.spriteWidth = b; this.spriteHeight = c; this.collisionShape = "box"; this.getImage(a) }, draw: function () { var a = this.frame; var b = v[this.img]; var c = this.spriteWidth; var d = this.spriteHeight; var e = this.width / 2; var f = this.height / 2; var g = b.width / c; var h = b.height / d; var i = this.width / c; var j = this.height / d; var k = (a % g) * c; var l = (~~(a / g) % h) * d; B.save(); B.translate(this.x + e, this.y + f); B.rotate(this.rot); B.translate(-e, -f); B.scale(i, j); B.drawImage(b, k, l, c, d, 0, 0, c, d); B.restore() } }); var M = new Object(); M.Box = Atlas.createClass(J, { initialize: function (a, b, c) { this.x = 0; this.y = 0; this.col = a; this.rot = 0; this.width = b; this.height = c; this.alpha = 1; this.collisionShape = "box" }, draw: function () { B.globalAlpha = this.alpha; B.beginPath(); B.fillStyle = this.col; var a = this.x + this.width / 2; var b = this.y + this.height / 2; B.save(); B.translate(a, b); B.rotate(this.rot); B.translate(-a, -b); B.fillRect(this.x, this.y, this.width, this.height); B.restore(); B.globalAlpha = 1 } }); M.Circle = Atlas.createClass(J, { initialize: function (a, b) { this.x = 0; this.y = 0; this.col = a; this.rot = 0; this.width = b * 2; this.alpha = 1; this.collisionShape = "circle" }, draw: function () { B.globalAlpha = this.alpha; B.beginPath(); B.fillStyle = this.col; var a = this.width / 2; B.arc(this.x + a, this.y + a, a, 0, Math.PI * 2, false); B.fill(); B.globalAlpha = 1 } }); var N = function (a, b, c, d) { this.x = 0; this.y = 0; this.alpha = 1; this.spaceWidth = 0; if (d) this.font = "'" + d + "'"; else this.font = "'Meiryo'"; if (c) this.size = c + "pt"; else this.size = "10pt"; if (a) this.string = a; else this.string = ""; if (b) this.col = b; else this.col = "white" }; N.prototype = { setSize: function (a) { this.size = a + "pt" }, setFont: function (a) { this.font = "'" + a + "'" }, setPosition: function (x, y) { this.x = x; this.y = y }, draw: function () { var x = this.x; var y = this.y; var a = this.string.split('<br>'); var b = a.length; B.globalAlpha = this.alpha; B.font = this.size + " " + this.font; B.fillStyle = this.col; if (b > 1) { var c = B.measureText('a').width * 1.5 + this.spaceWidth; for (var i = 0; i < b; i++) { B.fillText(a[i], x, y); y += c } } else B.fillText(this.string, x, y); B.globalAlpha = 1 } }; var O = Atlas.createClass(Array, { initialize: function () { this.inherent() }, add: function (a) { if (typeof a == 'object' && typeof a.move == 'function') { a.remove = false; this.push(a) } }, move: function () { var a = arguments.length; for (var i = 0, n = this.length; i < n; i++) { if (a > 0) this[i].move.apply(this[i], arguments); else this[i].move(); if (this[i].remove) { this.splice(i, 1); i--; n-- } } } }); Atlas.App = I; Atlas.Sprite = L; Atlas.Text = N; Atlas.Shape = M; Atlas.Group = O; Atlas.Map = K })();